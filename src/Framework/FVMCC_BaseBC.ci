#include "Environment/Factory.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Framework {
 
//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
FVMCC_BaseBC<BASE>::FVMCC_BaseBC(const std::string& name) :
  BASE(name),
  m_sInterpolator(),
  _putGhostsOnFace(false),
  socket_normals("normals"),
  socket_faceAreas("faceAreas"),
  socket_states("states"),
  socket_gstates("gstates"),
  socket_nodes("nodes"),
  m_velocityIDs(),
  m_computeVars(),
  m_t(0.), 
  m_drXiXw(0.), 
  m_drXiXg(0.),
  m_factor(0.),
  m_innerNode(CFNULL), 
  m_faceMidPoint(),
  m_XgXm(),
  m_tempNode(), 
  m_midNode(), 
  m_tempGhostNode(), 
  m_tempGhostNodeBkp(), 
  m_faceNormal(),
  m_initialSolutionMap(),
  m_fullLoop(true)
{
  this->addConfigOptionsTo(this);
  
  _zeroGradient = std::vector<bool>();
  this->setParameter("ZeroGradientFlags",&_zeroGradient); 
  
  m_coeff = 2.0; 
  this->setParameter("CoeffMove",&m_coeff);
  
  m_initialSolutionIDs = std::vector<CFuint>();
  this->setParameter("InitialSolutionIDs",&m_initialSolutionIDs);
  
  m_sInterpolatorStr = "Null";
  this->setParameter("StateInterpolator",&m_sInterpolatorStr); 
}
    
//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
FVMCC_BaseBC<BASE>::~FVMCC_BaseBC()
{
  if (m_initialSolutionMap.size() > 0) {
    for (CFuint i = 0; i < m_initialSolutionMap.size(); ++i) {
      deletePtr(m_initialSolutionMap[i]);
    }
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void FVMCC_BaseBC<BASE>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< std::string >
    ("StateInterpolator", "State interpolator for BCs");
  
  options.template addConfigOption< std::vector<bool> >
    ("ZeroGradientFlags",
     "Flag specifying constantly extrapolated variables");
  
  options.template addConfigOption< CFreal > 
    ("CoeffMove", "coefficient for the ghost node movement");

  options.addConfigOption< std::vector<CFuint> >
    ("InitialSolutionIDs", "IDs of initial solution components that will be used as BC value.");
}
    
//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void FVMCC_BaseBC<BASE>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
  
  BASE::setup();
  
  // set the IDs corresponding to the velocity components
  this->getMethodData().getUpdateVar()->setStateVelocityIDs(m_velocityIDs);
  
  // set the interpolator
  m_sInterpolator->setup();
  
  const CFuint nbEqs = PhysicalModelStack::getActive()->getNbEq();
  if(_zeroGradient.size() > 0 && _zeroGradient.size() != nbEqs) {
    CFLog(VERBOSE, "WARNING: FVMCC_BaseBC " << this->getName() << " has zero gradient flags not properly set\n");
    CFLog(VERBOSE, "WARNING: FVMCC_BaseBC " << this->getName() << " sets all zero gradient flags=false\n");
  }
  
  if(_zeroGradient.size() == 0) {
    _zeroGradient.resize(nbEqs);
    _zeroGradient.assign(nbEqs, false);
  }
  
  CFLog(VERBOSE, "TRS " << this->getName() << " has zero gradient flags = ");
  for (CFuint i = 0; i < _zeroGradient.size(); ++i) {
    CFLog(VERBOSE, _zeroGradient[i] << " ");
  }
  CFLog(VERBOSE, "\n");
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim(); 
  m_faceMidPoint.resize(dim);
  m_XgXm.resize(dim);
  m_tempNode.resize(dim); 
  m_midNode.resize(dim); 
  m_tempGhostNode.resize(dim); 
  m_tempGhostNodeBkp.resize(dim); 
  m_faceNormal.resize(dim); 
  
  m_computeVars.resize(PhysicalModelStack::getActive()->getNbEq(), true);
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void FVMCC_BaseBC<BASE>::unsetup()
{
  BASE::unsetup();
  
  m_sInterpolator->unsetup();
}
    
//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void FVMCC_BaseBC<BASE>::executeOnTrs()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
  
  m_fullLoop = true;
  
  SafePtr<TopologicalRegionSet> trs = this->getCurrentTRS();
  CFLog(VERBOSE, "FVMCC_BaseBC::execute() called for TRS: "
	<< trs->getName() << "\n");

  Common::SafePtr<GeometricEntityPool<FaceTrsGeoBuilder> >
    geoBuilder = this->getMethodData().getFaceTrsGeoBuilder();

  SafePtr<FaceTrsGeoBuilder> geoBuilderPtr = geoBuilder->getGeoBuilder();
  geoBuilderPtr->setDataSockets(socket_states, socket_gstates, socket_nodes);

  FaceTrsGeoBuilder::GeoData& geoData = geoBuilder->getDataGE();
  geoData.isBFace = true;
  geoData.trs = trs;

  preProcess();

  const CFuint nbTrsFaces = trs->getLocalNbGeoEnts();
  for (CFuint iFace = 0; iFace < nbTrsFaces; ++iFace) {
    CFLogDebugMed( "iFace = " << iFace << "\n");

    // build the GeometricEntity
    geoData.idx = iFace;
    
    GeometricEntity *const face = geoBuilder->buildGE();
    this->getMethodData().getCurrentFace() = face;
    
    setGhostState(face);
    
    // release the GeometricEntity
    geoBuilder->releaseGE();
  } 
  
  m_fullLoop = false;
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void FVMCC_BaseBC<BASE>::computeFlux(RealVector& result)
{
  this->getMethodData().getFluxSplitter()->computeFlux(result);
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > 
FVMCC_BaseBC<BASE>::needsSockets()
{
  std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > result;

  result.push_back(&socket_normals);
  result.push_back(&socket_faceAreas);
  result.push_back(&socket_states);
  result.push_back(&socket_gstates);
  result.push_back(&socket_nodes);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <typename BASE>
void FVMCC_BaseBC<BASE>::preProcess()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;

  const CFuint initialSSize = m_initialSolutionIDs.size();
  if (initialSSize > 0 && this->getMethodData().isPreProcessedSolution()) {
    SafePtr<TopologicalRegionSet> trs = this->getCurrentTRS();
    
    if (!m_initialSolutionMap.exists(trs->getName())) {
      CFLog(INFO, "FVMCC_BaseBC<BASE>::preProcess() => TRS[ " << trs->getName()
	  << " ] => START\n");
      
      Common::SafePtr<GeometricEntityPool<FaceTrsGeoBuilder> >
	geoBuilder = this->getMethodData().getFaceTrsGeoBuilder();
      SafePtr<FaceTrsGeoBuilder> geoBuilderPtr = geoBuilder->getGeoBuilder();
      
      FaceTrsGeoBuilder::GeoData& geoData = geoBuilder->getDataGE();
      geoData.isBFace = true;
      geoData.trs = trs;
      
      const CFuint nbTrsFaces = trs->getLocalNbGeoEnts();
          
      RealVector* initialState = new RealVector(nbTrsFaces*initialSSize);
      cf_assert(initialState != CFNULL);
      
      CFuint counter = 0;
      for (CFuint iFace = 0; iFace < nbTrsFaces; ++iFace) {
	// build the GeometricEntity
	geoData.idx = iFace;
	GeometricEntity *const face = geoBuilder->buildGE();
	
	for (CFuint i = 0; i < m_initialSolutionIDs.size(); ++i, ++counter) {
	  const CFuint varID = m_initialSolutionIDs[i];
	  cf_assert(counter < initialState->size());
	  
	  const State& innerState = *face->getState(0);
	  cf_assert(varID < innerState.size());
	  (*initialState)[counter] = innerState[varID];
	}
	
	// release the GeometricEntity
	geoBuilder->releaseGE();
      }
      
      m_initialSolutionMap.insert(trs->getName(), initialState);
      CFLog(INFO, "FVMCC_BaseBC<BASE>::preProcess() => TRS[ " << trs->getName() << " ] => END\n");
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
    
template <typename BASE>
void FVMCC_BaseBC<BASE>::computeGhostPosition(Framework::GeometricEntity *const face) 
{ 
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  const CFuint dim = PhysicalModelStack::getActive()->getDim(); 
  const CFuint faceID = face->getID(); 
  const CFuint startID = faceID*dim; 
  
  DataHandle<CFreal> normals = socket_normals.getDataHandle(); 
  
  // set the current normal 
  for (CFuint i = 0; i < dim; ++i) { 
    m_faceNormal[i] = normals[startID + i]; 
  } 
  
  // compute the original position of the ghost state @see ComputeDummyState 
  const CFuint nbNodesInFace = face->nbNodes();	
  m_faceMidPoint = 0.;
  for (CFuint i =0; i < nbNodesInFace; ++i) {
    m_faceMidPoint += *face->getNode(i);
  }
  m_faceMidPoint /= (CFreal)nbNodesInFace;

  CFreal k = 0.0;
  //if (face->nbNodes() < 4) { 
  // k = - MathFunctions::innerProd(m_faceNormal, *face->getNode(0)); 
  k = - MathFunctions::innerProd(m_faceNormal, m_faceMidPoint);
  // } 
  // else if (face->nbNodes() == 4) { 
  // if the face has 4 nodes, they could nopt lie all on the same plane 
  // so we take an average 
  //  const CFreal p0 = - MathFunctions::innerProd(m_faceNormal, *face->getNode(0)); 
  // const CFreal p1 = - MathFunctions::innerProd(m_faceNormal, *face->getNode(1)); 
  // const CFreal p2 = - MathFunctions::innerProd(m_faceNormal, *face->getNode(2)); 
  // const CFreal p3 = - MathFunctions::innerProd(m_faceNormal, *face->getNode(3)); 
  // k = 0.25*(p0 + p1 + p2 + p3); 
  //  } 
  
  const CFreal n2 = MathFunctions::innerProd(m_faceNormal, m_faceNormal);
  cf_assert (std::abs(n2) > 0.0); 
  State *const innerState = face->getState(0); 
  m_innerNode = &innerState->getCoordinates(); 
  m_t = (MathFunctions::innerProd(m_faceNormal,*m_innerNode) + k)/n2; 
  
  m_tempGhostNode = (*m_innerNode) - 2.*m_t*m_faceNormal; 
  
  /* if (face->nbNodes() == 4) {  
  // we check if the candidate ghost point G is on the other side with respect to the face mid point F  
  // and the inner state I   
  // consider the two vectors (G-F) and (I-F): if their dot product is > 0 they are on the same   
  // side of the face   
  
  static RealVector ghostF(3);  
  static RealVector innerF(3);  
  static RealVector midF(3);  
  
  midF = 0.25*((*face->getNode(0)) + (*face->getNode(1)) + (*face->getNode(2)) + (*face->getNode(3))); 
  ghostF = m_tempGhostNode - midF ;  
  innerF = *m_innerNode - midF;  
  if (MathFunctions::innerProd(ghostF,innerF) > 0.) {   
  //      cout << "NoSlipWallIsothermalNSvt => ghost wrong !! "<< endl; abort();  
  
  // xG = xI + 2 * (xF - xI) = xI - 2 * (xI - xF)   
  m_tempGhostNode = (*m_innerNode) - 2.0*innerF;  
  }  
  } */ 
  
  // this middle node is by construction on the boundary face 
  m_midNode = 0.5*(*m_innerNode + m_tempGhostNode); 
  
  // first calculate the "unmodified distances" inner-wall, inner-ghost 
  m_drXiXw = MathTools::MathFunctions::getDistance(*m_innerNode,m_midNode); 
  m_drXiXg = MathTools::MathFunctions::getDistance(*m_innerNode, m_tempGhostNode); 

} 
      
//////////////////////////////////////////////////////////////////////////////
    
template <typename BASE>
void FVMCC_BaseBC<BASE>::configure ( Config::ConfigArgs& args )
{
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Environment;
  
  BASE::configure(args);
  
  SafePtr<StateInterpolator::PROVIDER> stateInterpProv = CFNULL;
  try {
    stateInterpProv = 
      FACTORY_T_GET_PROVIDER(this->getFactoryRegistry(), StateInterpolator, m_sInterpolatorStr);
  }
  catch (NoSuchValueException& e) {
    CFLog(WARN, "FVMCC_BaseBC::configure() => StateInterpolator \"" << 
	  m_sInterpolatorStr << "\" missing => reset to \"Null\"\n");
    
    m_sInterpolatorStr = "Null";
    stateInterpProv = 
      FACTORY_T_GET_PROVIDER(this->getFactoryRegistry(), StateInterpolator, m_sInterpolatorStr);
  }
 
  Common::SelfRegistPtr<Framework::StateInterpolator>* sInterpolator =
	 stateInterpProv->createPtr(m_sInterpolatorStr);
  m_sInterpolator = *sInterpolator;
  cf_assert(m_sInterpolator.isNotNull());
  
  this->configureNested(m_sInterpolator.getPtr(), args);

  delete sInterpolator;
}
    
//////////////////////////////////////////////////////////////////////////////
  
} // namespace Framework
  
} // namespace COOLFluiD
