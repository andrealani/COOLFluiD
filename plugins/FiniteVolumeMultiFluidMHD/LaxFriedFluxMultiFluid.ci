#include "Framework/EquationSetData.hh"
#include "Framework/BaseTerm.hh"
#include "FiniteVolume/FVMCC_PolyRec.hh"
#include "MultiFluidMHD/EulerMFMHDTerm.hh"
#include "Framework/MultiScalarTerm.hh"

//////////////////////////////////////////////////////////////////////////////

using namespace std;
using namespace COOLFluiD::Framework;
using namespace COOLFluiD::Common;

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
LaxFriedFluxMultiFluid<UPDATEVAR>::LaxFriedFluxMultiFluid(const std::string& name) :
  FVMCC_FluxSplitter(name),
  m_updateVarSet(CFNULL),
  m_lData(CFNULL),
  m_rData(CFNULL),
  m_a12Vec(),
  m_mL(),
  m_mR(),
  m_unL(),
  m_unR(),
  m_mflux12(),
  m_p12(),
  m_tempUnitNormal(),
  m_pdata(),
  _rightEv(),
  _leftEv(),
  _eValues(),
  _absEvalues(),
  _absJacob(),
  _jRight(),
  _jLeft(),
  _jacob(),
  _jacobLeftTransf(),
  _jacobRightTransf(),
  _jacobDummy(),
  _EMField_l(),
  _EMField_r(), 
  _Aplus(),
  _Aminus(), 
  _resultEM(),
  _psi_l(),
  _psi_r(),
  _m_i(),
  _statesLR(2)
{
  addConfigOptionsTo(this);

  m_choiceA12 = 1;
  this->setParameter("choiceA12",&m_choiceA12);

  m_useLiouUpdateCoeff = false;
  this->setParameter("useLiouUpdateCoeff",&m_useLiouUpdateCoeff);
  
  m_useMacCormackScaling = true;
  this->setParameter("useMacCormackScaling",&m_useMacCormackScaling);

  m_coeff = 1.;
  this->setParameter("Coeff",&m_coeff);

  m_Bdiss = 1.;
  this->setParameter("Bdiss",&m_Bdiss);

  m_Ediss = 1.;
  this->setParameter("Ediss",&m_Ediss);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
LaxFriedFluxMultiFluid<UPDATEVAR>::~LaxFriedFluxMultiFluid()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFuint >
    ("choiceA12","Way of computing the interface sound speed a12.");

  options.template addConfigOption< bool >
   ("useLiouUpdateCoeff",
    "Flag to choose Liou's way to compute the update coefficient for imposing positivity.");
  
  options.template addConfigOption< bool >
   ("useMacCormackScaling", "Flag to use the scaling of the numerical dissipation in the Steger-Warming of Maxwell equations.");

  options.template addConfigOption< CFreal >
    ("Coeff","Coeff for numerical viscosity in the div cleaning");

  options.template addConfigOption< CFreal >
    ("Bdiss","Coeff for numerical viscosity in the magnetic Field");

  options.template addConfigOption< CFreal >
    ("Ediss","Coeff for numerical viscosity in the electric Field");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::setup()
{
  using namespace COOLFluiD::Framework;
 
  FVMCC_FluxSplitter::setup();
  
  m_tempUnitNormal.resize(PhysicalModelStack::getActive()->getDim());

  PhysicalModelStack::getActive()->getImplementor()->
    getConvectiveTerm()->resizePhysicalData(m_pdata);
    
  m_updateVarSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  cf_assert(m_updateVarSet.isNotNull());
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const bool is2DHalf = PhysicalModelStack::getActive()->getImplementor()->is2DHalf();
  const CFuint nbSpecies = m_updateVarSet->getModel()->getNbScalarVars(0);
  
  // AUSM scheme related data
  const CFuint nbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  m_a12Vec.resize(nbSpecies);
  m_p12.resize(nbSpecies);
  m_mflux12.resize(nbSpecies);
  m_unL.resize(nbSpecies);
  m_unR.resize(nbSpecies);
  m_mL.resize(nbSpecies);
  m_mR.resize(nbSpecies);
  _rightEv.resize(nbEqs, nbEqs);
  _leftEv.resize(nbEqs, nbEqs);
  _eValues.resize(nbEqs);
  _absEvalues.resize(nbEqs);
  _absJacob.resize(nbEqs,nbEqs);
  _jRight.resize(nbEqs,nbEqs);
  _jLeft.resize(nbEqs, nbEqs);
  _jacob.resize(nbEqs, nbEqs);
  _jacobLeftTransf.resize(nbEqs, nbEqs);
  _jacobRightTransf.resize(nbEqs, nbEqs);
  _jacobDummy.resize(nbEqs, nbEqs);
  _EMField_l.resize(8);
  _EMField_r.resize(8); 
  _Aplus.resize(8,8);
  _Aminus.resize(8,8);  
  _resultEM.resize(8);
  if(is2DHalf){
    _psi_l.resize(nbSpecies + 3*nbSpecies + nbSpecies);
    _psi_r.resize(nbSpecies + 3*nbSpecies + nbSpecies);
  }
  else {
    _psi_l.resize(nbSpecies + dim*nbSpecies + nbSpecies);
    _psi_r.resize(nbSpecies + dim*nbSpecies + nbSpecies);
  }
  _m_i.resize(3);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::compute(RealVector& result)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
  const CFuint nbEqs = eqSS.getNbEqsSS();  				
  const CFuint iEqSS = eqSS.getEqSS();
   
  vector<RealVector>& pdata = getMethodData().getPolyReconstructor()->getExtrapolatedPhysicaData();
  m_lData = &pdata[LEFT];
  m_rData = &pdata[RIGHT];
  CFuint dim = PhysicalModelStack::getActive()->getDim();
  const bool is2DHalf = PhysicalModelStack::getActive()->getImplementor()->is2DHalf();

  CellCenterFVMData& data = this->getMethodData();
  SafePtr<FVMCC_PolyRec> polyRec = data.getPolyReconstructor();
  std::vector<Framework::State*> statesLR(2); 
  statesLR[0] = &polyRec->getCurrLeftState();
  statesLR[1] = &polyRec->getCurrRightState();
  cf_assert(*statesLR[0] == polyRec->getCurrLeftState());
  cf_assert(*statesLR[1] == polyRec->getCurrRightState());

  std::vector<Framework::State*>* solutionStates(CFNULL);

  if (!this->getMethodData().reconstructSolVars()) {
    solutionStates = this->getMethodData().getUpdateToSolutionVecTrans()->transform(&statesLR);
  }
  else {
    solutionStates = &statesLR;
  }

  RealVector rightEv(nbEqs);
  RealVector leftEv(nbEqs);
  const RealVector& normal = this->getMethodData().getUnitNormal();
  m_updateVarSet->computeEigenValues(pdata[1], normal, rightEv);
  m_updateVarSet->computeEigenValues(pdata[0], normal, leftEv);

  RealVector sumFlux(nbEqs);
  sumFlux  = m_updateVarSet->getFlux()(pdata[1], normal);
  sumFlux += m_updateVarSet->getFlux()(pdata[0], normal);

  const CFreal nx = normal[XX];
  const CFreal ny = normal[YY];
  CFreal       nz = 0.0;
  if (dim == 3) nz = normal[ZZ];
 
  const CFuint firstTemperature = m_updateVarSet->getModel()->getFirstScalarVar(2);
  const CFuint firstVelocity = m_updateVarSet->getModel()->getFirstScalarVar(1); 
  RealVector a(2);
  for (CFuint i = 0; i < 2; ++i) {
    const CFreal s_LEFT  = pdata[LEFT][firstTemperature + 4*i + 2]; //i species
    const CFreal u_LEFT  = pdata[LEFT][firstVelocity + dim*i];
    const CFreal v_LEFT  = pdata[LEFT][firstVelocity + 1 + dim*i];
    CFreal       w_LEFT  = 0.0;
    const CFreal s_RIGHT = pdata[RIGHT][firstTemperature + 4*i + 2]; //i species
    const CFreal u_RIGHT = pdata[RIGHT][firstVelocity + dim*i];
    const CFreal v_RIGHT = pdata[RIGHT][firstVelocity + 1 + dim*i];
    CFreal       w_RIGHT = 0.0;
    CFreal un_LEFT  = u_LEFT  * nx + v_LEFT  * ny;
    CFreal un_RIGHT = u_RIGHT * nx + v_RIGHT * ny;
    if (dim == 3) {
      w_LEFT    = pdata[LEFT][firstVelocity + 2 + dim*i];
      un_LEFT  += w_LEFT * nz;
      w_RIGHT   = pdata[RIGHT][firstVelocity + 2 + dim*i];
      un_RIGHT += w_RIGHT * nz;
    }
    
    const CFreal a_LEFT  = max(std::abs(un_LEFT +s_LEFT ),std::abs(un_LEFT -s_LEFT )); 
    const CFreal a_RIGHT = max(std::abs(un_RIGHT+s_RIGHT),std::abs(un_RIGHT-s_RIGHT)); 
    a[i] = max(a_LEFT,a_RIGHT);
  }

  State& leftState  = *(*solutionStates)[0];
  State& rightState = *(*solutionStates)[1];
   
  const EquationSetData& eqSetEMField = UPDATEVAR::MAXWELLSET::getEqSetData()[0]; //Electromagnetic Field
  const vector<CFuint>& varIDsEMField = eqSetEMField.getEqSetVarIDs();
  const CFuint endEM = varIDsEMField.size();
  result[endEM]   = 0.5*(sumFlux[endEM]   - a[0]*(rightState[endEM]   - leftState[endEM]  ));
  result[endEM+1] = 0.5*(sumFlux[endEM+1] - a[1]*(rightState[endEM+1] - leftState[endEM+1]));
  result[nbEqs-2] = 0.5*(sumFlux[nbEqs-2] - a[0]*(rightState[nbEqs-2] - leftState[nbEqs-2]));
  result[nbEqs-1] = 0.5*(sumFlux[nbEqs-1] - a[1]*(rightState[nbEqs-1] - leftState[nbEqs-1]));
  const CFuint nbSpecies = m_updateVarSet->getModel()->getNbScalarVars(0);
  for (CFuint iS = 0; iS < nbSpecies; ++iS)
    if(is2DHalf || dim == 3)
      for (CFuint iD = 0; iD < 3; ++iD)
        result[endEM+nbSpecies+iS*3+iD] = 0.5*(sumFlux[endEM+nbSpecies+iS*3+iD] - a[iS]*(rightState[endEM+nbSpecies+iS*3+iD] - leftState[endEM+nbSpecies+iS*3+iD]));
    else
      for (CFuint iD = 0; iD < 2; ++iD)
        result[endEM+nbSpecies+iS*2+iD] = 0.5*(sumFlux[endEM+nbSpecies+iS*2+iD] - a[iS]*(rightState[endEM+nbSpecies+iS*2+iD] - leftState[endEM+nbSpecies+iS*2+iD]));
  
  if (nbEqs == totalNbEqs || iEqSS == 0) {
    CFLog(DEBUG_MED, "LaxFriedFluxMultiFluid::compute() => Maxwell iEqSS = " << iEqSS << ", isPerturb " 
	  << getMethodData().isPerturb() << ", iVar = " << getMethodData().iPerturbVar() <<"\n");
    
    // here there could be the current number of equations if we want
    // different eigenvalues for each set of equations
    
    // const CFuint firstEMField = varIDsEMField[0];  

    /// flux splitting scheme for Maxwell's Equations
    //loop to set the electromagnetic variables 
    for (CFuint i = 0; i < endEM; ++i){
      _EMField_l[i] = (*this->m_lData)[i];
      _EMField_r[i] = (*this->m_rData)[i];    
    }
    computeMatrixAplus();
    computeMatrixAminus();
    
    _resultEM = 0.5*_Aplus*_EMField_l + 0.5*_Aminus*_EMField_r;   
    for(CFuint iem = 0; iem < endEM; ++iem){
      result[iem] = _resultEM[iem];   
    }    
  }
  
  if (!this->getMethodData().isPerturb()) {
    computeUpdateCoeff();
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::computeUpdateCoeff()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  CellCenterFVMData& data = this->getMethodData(); 
  GeometricEntity& face = *data.getCurrentFace();
  const CFreal faceArea = socket_faceAreas.getDataHandle()[face.getID()]/
    data.getPolyReconstructor()->nbQPoints();
  const EquationSubSysDescriptor& eqSSD = PhysicalModelStack::getActive()->
    getEquationSubSysDescriptor();
  
  DataHandle<CFreal> updateCoeff = socket_updateCoeff.getDataHandle();
  const CFuint nbEqSS = eqSSD.getTotalNbEqSS();
  //   CFLog(INFO, "AUSMFluxMultiFluid::computeUpdateCoeff() => nbEqSS = " << nbEqSS << "\n");
  for (CFuint i = 0; i < nbEqSS; ++i) {
    // set the ID of the current equation subsystem
    //m_updateVarSet->setEqSS(i);
    
    // left contribution to update coefficient
    const CFuint leftID = face.getState(0)->getLocalID();
    CFreal maxEV = m_updateVarSet->getMaxEigenValue(*m_lData, data.getUnitNormal());
    CFLog(DEBUG_MED, "AUSMFluxMultiFluid::computeUpdateCoeff() => Max left eigenvalue in EqSS " << i << " is " << maxEV << "\n");
    updateCoeff[leftID*nbEqSS + i] += max(maxEV, 0.)*faceArea;
    
    if (!face.getState(1)->isGhost()) {
      // right contribution to update coefficient
      const CFuint rightID = face.getState(1)->getLocalID();
      m_tempUnitNormal = -1.0*data.getUnitNormal();
      maxEV = m_updateVarSet->getMaxEigenValue(*m_rData,m_tempUnitNormal);
      CFLog(DEBUG_MED, "AUSMFluxMultiFluid::computeUpdateCoeff() => Max right eigenvalue in EqSS " << i << " is " << maxEV << "\n");
      updateCoeff[rightID*nbEqSS + i] += max(maxEV, 0.)*faceArea;    
    }
  }
}
      

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::computeLeftJacobian()
{  
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  CellCenterFVMData& data = this->getMethodData(); 
  GeometricEntity& face = *data.getCurrentFace();
  State *const leftState = face.getState(LEFT);
  RealVector& pData = PhysicalModelStack::getActive()->getImplementor()->
    getConvectiveTerm()->getPhysicalData();
  getMethodData().getUpdateVar()->computePhysicalData(*leftState, pData);
  getMethodData().getSolutionVar()->computeProjectedJacobian(data.getUnitNormal(), _jacob); 
  _jLeft = 0.5*(_jacob + _absJacob);
  
  // computeTransformMatrix(leftState);
  // _lFluxJacobian = _jLeft*_jacobDummy;
  
  SafePtr<VarSetMatrixTransformer>  vs = 
    getMethodData().getUpdateToSolutionInUpdateMatTrans();
  vs->setMatrix(*leftState);
  const RealMatrix& dUdP = *vs->getMatrix();  
  _lFluxJacobian = _jLeft*dUdP;
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::computeRightJacobian()
{ 
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  CellCenterFVMData& data = this->getMethodData(); 
  GeometricEntity& face = *data.getCurrentFace();
  State *const rightState = face.getState(RIGHT);
  RealVector& pData = PhysicalModelStack::getActive()->getImplementor()->
    getConvectiveTerm()->getPhysicalData();
  getMethodData().getUpdateVar()->computePhysicalData(*rightState, pData);
  getMethodData().getSolutionVar()->computeProjectedJacobian(data.getUnitNormal(), _jacob);
  _jRight = 0.5*(_jacob - _absJacob);
  
  // computeTransformMatrix(rightState);
  //_rFluxJacobian = _jRight*_jacobDummy;
  
  SafePtr<VarSetMatrixTransformer>  vs = 
    getMethodData().getUpdateToSolutionInUpdateMatTrans();
  vs->setMatrix(*rightState);
  const RealMatrix& dUdP = *vs->getMatrix();
  _rFluxJacobian = _jRight*dUdP;
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::computeLinearizedAbsJacob()
{  
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  CellCenterFVMData& data = this->getMethodData(); 
  
  // linearization in update states
  _statesLR[0] = &data.getPolyReconstructor()->getCurrLeftState();
  _statesLR[1] = &data.getPolyReconstructor()->getCurrRightState();
  
  getMethodData().getJacobianLinearizer()->linearize(_statesLR);
  
  // set the eigenvectors and eigenvalues of the linearized jacobian
  getMethodData().getSolutionVar()->computeEigenValuesVectors(_rightEv,
							      _leftEv,
							      _eValues,
							      data.getUnitNormal());
  
  // set the abs of the  eigen values (the implementation of this
  // function change if there are entropy or carbuncle fixes)
  _absEvalues = abs(_eValues);
  
  // abs of the jacobian
  _absJacob = _rightEv*(_absEvalues*_leftEv);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::computeMatrixAplus()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const RealVector& normal = getMethodData().getUnitNormal();
  const CFreal gamma = m_updateVarSet->getModel()->getDivBCleaningConst();  //DivB cleaning technique constant
  const CFreal chi = m_updateVarSet->getModel()->getDivECleaningConst();
  const CFreal c_e = m_updateVarSet->getModel()->getLightSpeed();//speed of light
  const bool is2DHalf = PhysicalModelStack::getActive()->getImplementor()->is2DHalf();
  CFreal factor1 = 0.;
  CFreal factor2 = 0.;
  CFreal factor3 = 0.;
  CFreal factor4 = 0.;
  
  if(m_useMacCormackScaling){
    factor1 = 1.;
    factor2 = c_e*c_e;
    factor3 = m_coeff*c_e*c_e;
    factor4 = m_coeff;
  }
  else{
    factor1 = c_e*m_Bdiss;
    factor2 = c_e*m_Ediss;
    factor3 = c_e*m_coeff;
    factor4 = c_e*m_coeff;
  }
  
  if(dim == 2){
    _Aplus(0,0) = (normal[1]*normal[1] + gamma*normal[0]*normal[0])*factor1; //flag2
    _Aplus(0,1) = (gamma - 1.)*normal[0]*normal[1]*factor1; //flag2
    _Aplus(0,2) = 0.;
    _Aplus(0,3) = 0.;
    _Aplus(0,4) = 0.;
    _Aplus(0,5) = normal[1];
    _Aplus(0,6) = gamma*gamma*normal[0]; 
    _Aplus(0,7) = 0.; 
    
    _Aplus(1,0) = (gamma - 1.)*normal[0]*normal[1]*factor1; //flag2;
    _Aplus(1,1) = (normal[0]*normal[0] + gamma*normal[1]*normal[1])*factor1; //flag2
    _Aplus(1,2) = 0.;
    _Aplus(1,3) = 0.;
    _Aplus(1,4) = 0.;
    _Aplus(1,5) = -normal[0];
    _Aplus(1,6) = gamma*gamma*normal[1]; 
    _Aplus(1,7) = 0.; 
    
    _Aplus(2,0) = 0.;
    _Aplus(2,1) = 0.;
    _Aplus(2,2) = factor1; //flag2
    _Aplus(2,3) = -normal[1];
    _Aplus(2,4) = normal[0];
    _Aplus(2,5) = 0.;
    _Aplus(2,6) = 0.; 
    _Aplus(2,7) = 0.; 

    _Aplus(3,0) = 0.;
    _Aplus(3,1) = 0.;
    _Aplus(3,2) = -normal[1]*c_e*c_e;
    _Aplus(3,3) = (normal[1]*normal[1] + chi*normal[0]*normal[0])*factor2; //flag
    _Aplus(3,4) = (chi - 1.)*normal[0]*normal[1]*factor2; //flag
    _Aplus(3,5) = 0.;
    _Aplus(3,6) = 0.;  
    _Aplus(3,7) = chi*chi*normal[0]*c_e*c_e;  
    
    _Aplus(4,0) = 0.;
    _Aplus(4,1) = 0.;
    _Aplus(4,2) = normal[0]*c_e*c_e;
    _Aplus(4,3) = (chi -1.)*normal[0]*normal[1]*factor2; //flag
    _Aplus(4,4) = (normal[0]*normal[0] + chi*normal[1]*normal[1])*factor2; //flag
    _Aplus(4,5) = 0.;
    _Aplus(4,6) = 0.; 
    _Aplus(4,7) = chi*chi*normal[1]*c_e*c_e;  

    _Aplus(5,0) = normal[1]*c_e*c_e;
    _Aplus(5,1) = -normal[0]*c_e*c_e;
    _Aplus(5,2) = 0.;
    _Aplus(5,3) = 0.;
    _Aplus(5,4) = 0.;
    _Aplus(5,5) = factor2; //flag 
    _Aplus(5,6) = 0.; 
    _Aplus(5,7) = 0.; 
    
    _Aplus(6,0) = normal[0]*c_e*c_e;
    _Aplus(6,1) = normal[1]*c_e*c_e;
    _Aplus(6,2) = 0.;
    _Aplus(6,3) = 0.;
    _Aplus(6,4) = 0.;
    _Aplus(6,5) = 0.;  
    _Aplus(6,6) = gamma*factor3;
    _Aplus(6,7) = 0.;
    
    _Aplus(7,0) = 0.;
    _Aplus(7,1) = 0.;
    _Aplus(7,2) = 0.;
    _Aplus(7,3) = normal[0];
    _Aplus(7,4) = normal[1];
    _Aplus(7,5) = 0.; 
    _Aplus(7,6) = 0.; 
    _Aplus(7,7) = chi*factor4; //flag2  
  }
  if(dim == 3 || is2DHalf == true){
    CFreal nz = 0;
    if(dim == 3) nz = normal[2];
    _Aplus(0,0) = (1. + normal[0]*normal[0]*(gamma - 1.))*factor1;
    _Aplus(0,1) = (gamma - 1.)*normal[0]*normal[1]*factor1;
    _Aplus(0,2) = (gamma - 1.)*normal[0]*nz*factor1;
    _Aplus(0,3) = 0.;
    _Aplus(0,4) = -nz;
    _Aplus(0,5) = normal[1];
    _Aplus(0,6) = gamma*gamma*normal[0]; 
    _Aplus(0,7) = 0.; 

    _Aplus(1,0) = (gamma - 1.)*normal[0]*normal[1]*factor1;
    _Aplus(1,1) = (1. + normal[1]*normal[1]*(gamma - 1.))*factor1;
    _Aplus(1,2) = (gamma - 1.)*normal[1]*nz*factor1;
    _Aplus(1,3) = nz;
    _Aplus(1,4) = 0.;
    _Aplus(1,5) = -normal[0];
    _Aplus(1,6) = gamma*gamma*normal[1]; 
    _Aplus(1,7) = 0.; 

    _Aplus(2,0) = (gamma - 1.)*normal[0]*nz*factor1;
    _Aplus(2,1) = (gamma - 1.)*normal[1]*nz*factor1;
    _Aplus(2,2) = (1. + nz*nz*(gamma - 1.))*factor1;
    _Aplus(2,3) = -normal[1];
    _Aplus(2,4) = normal[0];
    _Aplus(2,5) = 0.;
    _Aplus(2,6) = gamma*gamma*nz; 
    _Aplus(2,7) = 0.; 

    _Aplus(3,0) = 0.; 
    _Aplus(3,1) = nz*c_e*c_e; 
    _Aplus(3,2) = -normal[1]*c_e*c_e;
    _Aplus(3,3) = (1. + normal[0]*normal[0]*(chi - 1.))*factor2;
    _Aplus(3,4) = (chi - 1.)*normal[0]*normal[1]*factor2;
    _Aplus(3,5) = (chi - 1.)*normal[0]*nz*factor2; 
    _Aplus(3,6) = 0.; 
    _Aplus(3,7) = chi*chi*normal[0]*c_e*c_e;

    _Aplus(4,0) = -nz*c_e*c_e;
    _Aplus(4,1) = 0.;
    _Aplus(4,2) = normal[0]*c_e*c_e;
    _Aplus(4,3) = (chi - 1.)*normal[0]*normal[1]*factor2;
    _Aplus(4,4) = (1. + normal[1]*normal[1]*(chi - 1.))*factor2;
    _Aplus(4,5) = (chi - 1.)*normal[1]*nz*factor2;
    _Aplus(4,6) = 0.; 
    _Aplus(4,7) = chi*chi*normal[1]*c_e*c_e; 

    _Aplus(5,0) = normal[1]*c_e*c_e;
    _Aplus(5,1) = -normal[0]*c_e*c_e;
    _Aplus(5,2) = 0.;
    _Aplus(5,3) = (chi - 1.)*normal[0]*nz*factor2;
    _Aplus(5,4) = (chi - 1.)*normal[1]*nz*factor2;
    _Aplus(5,5) = (1. + nz*nz*(chi - 1.))*factor2;
    _Aplus(5,6) = 0.; 
    _Aplus(5,7) = chi*chi*nz*c_e*c_e; 
    
    _Aplus(6,0) = normal[0]*c_e*c_e;
    _Aplus(6,1) = normal[1]*c_e*c_e;
    _Aplus(6,2) = nz*c_e*c_e;
    _Aplus(6,3) = 0.;
    _Aplus(6,4) = 0.;
    _Aplus(6,5) = 0.; 
    _Aplus(6,6) = gamma*factor3; 
    _Aplus(6,7) = 0.;
    
    _Aplus(7,0) = 0.;
    _Aplus(7,1) = 0.;
    _Aplus(7,2) = 0.;
    _Aplus(7,3) = normal[0];
    _Aplus(7,4) = normal[1];
    _Aplus(7,5) = nz; 
    _Aplus(7,6) = 0.; 
    _Aplus(7,7) = chi*factor4;
  }
}
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void LaxFriedFluxMultiFluid<UPDATEVAR>::computeMatrixAminus()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const RealVector& normal = getMethodData().getUnitNormal();
  const CFreal gamma = m_updateVarSet->getModel()->getDivBCleaningConst();	//DivB cleaning technique constant
  const CFreal chi = m_updateVarSet->getModel()->getDivECleaningConst();
  const CFreal c_e = m_updateVarSet->getModel()->getLightSpeed();//speed of light
  const bool is2DHalf = PhysicalModelStack::getActive()->getImplementor()->is2DHalf();
  CFreal factor1 = 0.;
  CFreal factor2 = 0.;
  CFreal factor3 = 0.;
  CFreal factor4 = 0.;
  
  if(m_useMacCormackScaling){
    factor1 = 1.;
    factor2 = c_e*c_e;
    factor3 = m_coeff*c_e*c_e;
    factor4 = m_coeff;
  }
  else{
    factor1 = c_e*m_Bdiss;
    factor2 = c_e*m_Ediss;
    factor3 = c_e*m_coeff;
    factor4 = c_e*m_coeff;
  }

  if(dim == 2){
    _Aminus(0,0) = -(normal[1]*normal[1] + gamma*normal[0]*normal[0])*factor1; //flag2
    _Aminus(0,1) = (1. - gamma)*normal[0]*normal[1]*factor1; //flag2
    _Aminus(0,2) = 0.;
    _Aminus(0,3) = 0.;
    _Aminus(0,4) = 0.;
    _Aminus(0,5) = normal[1];
    _Aminus(0,6) = gamma*gamma*normal[0]; 
    _Aminus(0,7) = 0.; 

    _Aminus(1,0) = (1. - gamma)*normal[0]*normal[1]*factor1; //flag2
    _Aminus(1,1) = -(normal[0]*normal[0] + gamma*normal[1]*normal[1])*factor1; //flag2
    _Aminus(1,2) = 0.;
    _Aminus(1,3) = 0.;
    _Aminus(1,4) = 0.;
    _Aminus(1,5) = -normal[0];
    _Aminus(1,6) = gamma*gamma*normal[1]; 
    _Aminus(1,7) = 0.; 

    _Aminus(2,0) = 0.;
    _Aminus(2,1) = 0.;
    _Aminus(2,2) = -1*factor1; //flag2
    _Aminus(2,3) = -normal[1];
    _Aminus(2,4) = normal[0];
    _Aminus(2,5) = 0.;
    _Aminus(2,6) = 0.;
    _Aminus(2,7) = 0.; 

    _Aminus(3,0) = 0.;
    _Aminus(3,1) = 0.;
    _Aminus(3,2) = -normal[1]*c_e*c_e;
    _Aminus(3,3) = -(normal[1]*normal[1] + chi*normal[0]*normal[0])*factor2; //flag
    _Aminus(3,4) = (1. - chi)*normal[0]*normal[1]*factor2; //flag
    _Aminus(3,5) = 0.;
    _Aminus(3,6) = 0.;  
    _Aminus(3,7) = chi*chi*normal[0]*c_e*c_e;  
    
    _Aminus(4,0) = 0.;
    _Aminus(4,1) = 0.;
    _Aminus(4,2) = normal[0]*c_e*c_e;
    _Aminus(4,3) = (1. - chi)*normal[0]*normal[1]*factor2; //flag
    _Aminus(4,4) = -(normal[0]*normal[0] + chi*normal[1]*normal[1])*factor2; //flag
    _Aminus(4,5) = 0.;
    _Aminus(4,6) = 0.; 
    _Aminus(4,7) = chi*chi*normal[1]*c_e*c_e;  

    _Aminus(5,0) = normal[1]*c_e*c_e;
    _Aminus(5,1) = -normal[0]*c_e*c_e;
    _Aminus(5,2) = 0.;
    _Aminus(5,3) = 0.;
    _Aminus(5,4) = 0.;
    _Aminus(5,5) = -1*factor2; //flag 
    _Aminus(5,6) = 0.; 
    _Aminus(5,7) = 0.; 
    
    _Aminus(6,0) = normal[0]*c_e*c_e;
    _Aminus(6,1) = normal[1]*c_e*c_e;
    _Aminus(6,2) = 0.;
    _Aminus(6,3) = 0.;
    _Aminus(6,4) = 0.;
    _Aminus(6,5) = 0.;
    _Aminus(6,6) = -gamma*factor3;
    _Aminus(6,7) = 0.;
    
    _Aminus(7,0) = 0.;
    _Aminus(7,1) = 0.;
    _Aminus(7,2) = 0.;
    _Aminus(7,3) = normal[0];
    _Aminus(7,4) = normal[1];
    _Aminus(7,5) = 0.; 
    _Aminus(7,6) = 0.; 
    _Aminus(7,7) = -chi*factor4; //flag2  
  }
  if(dim == 3 || is2DHalf == true){
    CFreal nz = 0;
    if(dim == 3) nz = normal[2];
    _Aminus(0,0) = -(1. + normal[0]*normal[0]*(gamma - 1.))*factor1;
    _Aminus(0,1) = -(gamma - 1.)*normal[0]*normal[1]*factor1;
    _Aminus(0,2) = -(gamma - 1.)*normal[0]*nz*factor1;
    _Aminus(0,3) = 0.;
    _Aminus(0,4) = -nz;
    _Aminus(0,5) = normal[1];
    _Aminus(0,6) = gamma*gamma*normal[0]; 
    _Aminus(0,7) = 0.; 

    _Aminus(1,0) = -(gamma - 1.)*normal[0]*normal[1]*factor1;
    _Aminus(1,1) = -(1. + normal[1]*normal[1]*(gamma - 1.))*factor1;
    _Aminus(1,2) = -(gamma - 1.)*normal[1]*nz*factor1;
    _Aminus(1,3) = nz;
    _Aminus(1,4) = 0.;
    _Aminus(1,5) = -normal[0];
    _Aminus(1,6) = gamma*gamma*normal[1]; 
    _Aminus(1,7) = 0.; 

    _Aminus(2,0) = -(gamma - 1.)*normal[0]*nz*factor1;
    _Aminus(2,1) = -(gamma - 1.)*normal[1]*nz*factor1;
    _Aminus(2,2) = -(1. + nz*nz*(gamma - 1.))*factor1;
    _Aminus(2,3) = -normal[1];
    _Aminus(2,4) = normal[0];
    _Aminus(2,5) = 0.;
    _Aminus(2,6) = gamma*gamma*nz; 
    _Aminus(2,7) = 0.; 

    _Aminus(3,0) = 0.; 
    _Aminus(3,1) = nz*c_e*c_e; 
    _Aminus(3,2) = -normal[1]*c_e*c_e;
    _Aminus(3,3) = -(1. + normal[0]*normal[0]*(chi - 1.))*factor2;
    _Aminus(3,4) = -(chi - 1.)*normal[0]*normal[1]*factor2;
    _Aminus(3,5) = -(chi - 1.)*normal[0]*nz*factor2; 
    _Aminus(3,6) = 0.; 
    _Aminus(3,7) = chi*chi*normal[0]*c_e*c_e;

    _Aminus(4,0) = -nz*c_e*c_e;
    _Aminus(4,1) = 0.;
    _Aminus(4,2) = normal[0]*c_e*c_e;
    _Aminus(4,3) = -(chi - 1.)*normal[0]*normal[1]*factor2;
    _Aminus(4,4) = -(1. + normal[1]*normal[1]*(chi - 1.))*factor2;
    _Aminus(4,5) = -(chi - 1.)*normal[1]*nz*factor2;
    _Aminus(4,6) = 0.; 
    _Aminus(4,7) = chi*chi*normal[1]*c_e*c_e; 

    _Aminus(5,0) = normal[1]*c_e*c_e;
    _Aminus(5,1) = -normal[0]*c_e*c_e;
    _Aminus(5,2) = 0.;
    _Aminus(5,3) = -(chi - 1.)*normal[0]*nz*factor2;
    _Aminus(5,4) = -(chi - 1.)*normal[1]*nz*factor2;
    _Aminus(5,5) = -(1. + nz*nz*(chi - 1.))*factor2;
    _Aminus(5,6) = 0.; 
    _Aminus(5,7) = chi*chi*nz*c_e*c_e; 
    
    _Aminus(6,0) = normal[0]*c_e*c_e;
    _Aminus(6,1) = normal[1]*c_e*c_e;
    _Aminus(6,2) = nz*c_e*c_e;
    _Aminus(6,3) = 0.;
    _Aminus(6,4) = 0.;
    _Aminus(6,5) = 0.; 
    _Aminus(6,6) = -gamma*factor3; 
    _Aminus(6,7) = 0.;
    
    _Aminus(7,0) = 0.;
    _Aminus(7,1) = 0.;
    _Aminus(7,2) = 0.;
    _Aminus(7,3) = normal[0];
    _Aminus(7,4) = normal[1];
    _Aminus(7,5) = nz; 
    _Aminus(7,6) = 0.; 
    _Aminus(7,7) = -chi*factor4;  
  }  
}


//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
