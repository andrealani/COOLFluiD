#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/PhysicalConsts.hh"
#include "Common/CFLog.hh"
#include "Framework/GeometricEntity.hh"
#include "Common/NoSuchValueException.hh"
#include "FiniteVolume/ComputeDiffusiveFlux.hh"
#include "FiniteVolume/DerivativeComputer.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
HartmannSourceTerm<UPDATEVAR>::HartmannSourceTerm(const std::string& name) :
  ComputeSourceTermFVMCC(name),
  _varSet(CFNULL),
  _nstates(CFNULL),
  _isOutward(CFNULL),
  socket_divB("divB"),
  socket_Current("Current"),
  socket_BxPotential("BxPotential"),
  socket_ByPotential("ByPotential"),
  socket_BzPotential("BzPotential"),
  _ys(),
  _physicalData(),
  _temp(),
  _states(),
  _values(),
  _NonInducedEMField(),
  _J(),
  _dummyGradients(),
  _dataLeftState(),
  _dataRightState(),
  _gradBx(),
  _gradBy(),
  _gradBz()
{
  addConfigOptionsTo(this);
  
  _electricalConductivity = 1.;
  setParameter("electricalConductivity",&_electricalConductivity);

  _isResistive = false;
  setParameter("IsResistive",&_isResistive);
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
HartmannSourceTerm<UPDATEVAR>::~HartmannSourceTerm()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> >
HartmannSourceTerm<UPDATEVAR>::providesSockets()
{
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result = 
    ComputeSourceTermFVMCC::providesSockets();
  result.push_back(&socket_divB);
  result.push_back(&socket_Current);
  result.push_back(&socket_BxPotential);
  result.push_back(&socket_ByPotential);
  result.push_back(&socket_BzPotential);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >
     ("electricalConductivity", "electrical Conductivity used in Ohm's law");
  options.template addConfigOption< bool >
     ("IsResistive", "Test for electrical resistivity");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  
  ComputeSourceTermFVMCC::setup();
 
  const CFuint dim = PhysicalModelStack::getActive()->getDim(); 
  _varSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  _varSet->getModel()->resizePhysicalData(_physicalData);
  _varSet->getModel()->resizePhysicalData(_dataLeftState);
  _varSet->getModel()->resizePhysicalData(_dataRightState);
  cf_assert(_varSet.isNotNull());
  
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  _nstates = _sockets.template getSocketSink<RealVector>("nstates")->getDataHandle();
  _isOutward = this->socket_isOutward.getDataHandle();
  
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const CFuint nbSpecies = term->getNbScalarVars(0);
  _ys.resize(nbSpecies);
  
   // Get number of cells  
  Common::SafePtr<Common::ConnectivityTable<CFuint> > cells =
    MeshDataStack::getActive()->getConnectivity("cellStates_InnerCells");
  const CFuint nbCells = cells->nbRows();
  socket_divB.getDataHandle().resize(nbCells);
  socket_Current.getDataHandle().resize(nbCells);
  
  DataHandle<CFreal> divB        = socket_divB.getDataHandle();
  DataHandle<CFreal> Current     = socket_Current.getDataHandle();
  DataHandle<CFreal> BxPotential = socket_BxPotential.getDataHandle();  
  DataHandle<CFreal> ByPotential = socket_ByPotential.getDataHandle();
  DataHandle<CFreal> BzPotential = socket_BzPotential.getDataHandle();
  divB.resize(nbCells);
  divB = 0;
  Current.resize(nbCells);
  Current = 0;
  BxPotential.resize(nbCells);
  BxPotential = 0.;
  ByPotential.resize(nbCells);
  ByPotential = 0.;
  BzPotential.resize(nbCells);
  BzPotential = 0.;

  
  _temp.resize(PhysicalModelStack::getActive()->getNbEq());

  const CFuint maxNbNodesIn2DCV = 4;
  _states.reserve(maxNbNodesIn2DCV);
  
  SafePtr<DerivativeComputer> derComput = this->getMethodData().getDerivativeComputer();
  const CFuint nbNodesInControlVolume = derComput->getMaxNbVerticesInControlVolume();
  _values.resize(PhysicalModelStack::getActive()->getNbEq(), nbNodesInControlVolume);
  
  _NonInducedEMField.resize(6);
  _J.resize(3);
  _gradBx.resize(dim,0.);
  _gradBy.resize(dim,0.);
  if(dim == 3)
  {
    _gradBz.resize(dim,0.);
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::computeSource
(Framework::GeometricEntity *const element, RealVector& source, RealMatrix& jacobian)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
  
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const vector<State*>* const states = element->getStates();
  const CFuint elemID = element->getID();
  DataHandle<CFreal> divB = socket_divB.getDataHandle();
  DataHandle<CFreal> Current = socket_Current.getDataHandle();
  DataHandle<CFreal> BxPotential = socket_BxPotential.getDataHandle();
  DataHandle<CFreal> ByPotential = socket_ByPotential.getDataHandle();
  DataHandle<CFreal> BzPotential = socket_BzPotential.getDataHandle();

  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const bool is2DHalf = PhysicalModelStack::getActive()->getImplementor()->is2DHalf();
  
  cf_assert(states->size() == 1);
  
  const CFuint firstVelocity = term->getFirstScalarVar(1); 
 
  State *const currState = (*states)[0]; 
  _varSet->computePhysicalData(*(*states)[0], _physicalData);
  
  if(is2DHalf || PhysicalModelStack::getActive()->getDim() == 2)
  {
    _NonInducedEMField = _varSet->getModel()->getNonInducedEMField
      (currState->getCoordinates()[XX], currState->getCoordinates()[YY],0.); //The third component is null
  }
  else
  {
    _NonInducedEMField = _varSet->getModel()->getNonInducedEMField
      (currState->getCoordinates()[XX], currState->getCoordinates()[YY], currState->getCoordinates()[ZZ]); 
  }
  const CFreal BxTotal = _physicalData[UPDATEVAR::PTERM::BX] + _NonInducedEMField[0];
  const CFreal ByTotal = _physicalData[UPDATEVAR::PTERM::BY] + _NonInducedEMField[1];
  const CFreal BzTotal = _physicalData[UPDATEVAR::PTERM::BZ] + _NonInducedEMField[2];
  const CFreal ExTotal = _physicalData[UPDATEVAR::PTERM::EX] + _NonInducedEMField[3];
  const CFreal EyTotal = _physicalData[UPDATEVAR::PTERM::EY] + _NonInducedEMField[4];
  const CFreal EzTotal = _physicalData[UPDATEVAR::PTERM::EZ] + _NonInducedEMField[5];

  //cout <<"NonInduced EM Field = "<< _NonInducedEMField << endl;

  //   RealVector& refData = _varSet->getModel()->getReferencePhysicalData();
  DataHandle<CFreal> volumes = socket_volumes.getDataHandle();
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  DataHandle<CFint> isOutward =  this->socket_isOutward.getDataHandle();
  
  const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
  const CFuint nbEqs = eqSS.getNbEqsSS();  				
  const CFuint iEqSS = eqSS.getEqSS();

  //Set the velocities
  const CFreal u = _physicalData[firstVelocity];
  const CFreal v = _physicalData[firstVelocity + 1];
  CFreal w = 0.;
  if(dim == 3 || is2DHalf == true){ w = _physicalData[firstVelocity + 2];}
  const CFreal omega = _electricalConductivity;
  //const CFreal ovEpsilon = 1./term->getPermittivity(); OLD way of getting the permittivity
  const CFreal c_e = term->getLightSpeed();
  const CFreal mu0 = term->getPermeability();
  const CFreal ovEpsilon = c_e*c_e*mu0;
  CFreal Jx = 0., Jy = 0., Jz = 0.;
  
  if(dim == 2) 
  {
    Jx = omega*(ExTotal + v*BzTotal);
    Jy = omega*(EyTotal - u*BzTotal);
    Jz = omega*(EzTotal + u*ByTotal - v*BxTotal);
  }
  if(dim == 3 || is2DHalf == true)
  {
    Jx = omega*(ExTotal + v*BzTotal - w*ByTotal);
    Jy = omega*(EyTotal + w*BxTotal - u*BzTotal);
    Jz = omega*(EzTotal + u*ByTotal - v*BxTotal);  
  }
  CFreal JzCurl = 0.;

      cf_assert(states->size() == 1);

//      const vector<GeometricEntity*>& faces = *element->getNeighborGeos();
//      const CFuint nbFacesInElem = faces.size();
//      CFreal faceAvBx = 0.0;
//      CFreal faceAvBy = 0.0;
      CFreal curlB    = 0.0;

//      for (CFuint iFace = 0; iFace < nbFacesInElem; ++iFace) {

//        const GeometricEntity *const face = element->getNeighborGeo(i);
//        const CFuint faceID = face->getID();
//        const CFuint startID = faceID*PhysicalModelStack::getActive()->getDim();
//        const CFuint nbFaceNodes = face->nbNodes();
//        const CFreal ovNbFaceNodes = 1./(CFreal)nbFaceNodes;

//        const CFuint startID = faceID*PhysicalModelStack::getActive()->getDim();

//        CFreal nx = normals[startID];
//        CFreal ny = normals[startID + 1];

//        if (isOutward[faceID] != static_cast<CFint>(elemID)) {
//          nx *= -1.;
//          ny *= -1.;
//        }

//        for (CFuint n = 0; n < nbFaceNodes; ++n) {
//          const CFuint nodeID = face->getNode(n)->getLocalID();
//          const RealVector& nodalState = nstates[nodeID];
//          const CFuint BxID = 0;
//          const CFuint ByID = 1;
//          // consider all 3D components here even in 2D
//          for (CFuint d = 0; d < 2; ++d) {
//            const CFreal nd = m_normal[d];
//            _gradBx[d] += nd*nodalState[BxID]*ovNbFaceNodes;
//            _gradBy[d] += nd*nodalState[BxID]*ovNbFaceNodes;
//          }
//        }


//        //const CFuint faceID = (faces)[iFace]->getID();
//        //State *const leftState = (faces)[iFace]->getState(0);
//        ////State *const rightState = (*faces)[iFace]->getState(1);
//        //const GeometricEntity *const currFace = (faces)[iFace];
//        //State *const rightState = (currFace->getState(1) != currState) ?
//        //            currFace->getState(1) : currFace->getState(0);

//        //const CFuint startID = faceID*PhysicalModelStack::getActive()->getDim();

//        //CFreal nx = normals[startID];
//        //CFreal ny = normals[startID + 1];

//        //if (isOutward[faceID] != static_cast<CFint>(elemID)) {
//          //nx *= -1.;
//          //ny *= -1.;
//        //}

//        //_varSet->computePhysicalData(*leftState, _dataLeftState);
//        //_varSet->computePhysicalData(*rightState, _dataRightState);
//        //faceAvBx = 0.5*(_dataLeftState[UPDATEVAR::PTERM::BX] +
//        //        _dataRightState[UPDATEVAR::PTERM::BX]);
//        //faceAvBy = 0.5*(_dataLeftState[UPDATEVAR::PTERM::BY] +
//        //        _dataRightState[UPDATEVAR::PTERM::BY]);
//        curlB += -ny*faceAvBx + nx*faceAvBy;
//      }

// computing gradients for divB
      const CFuint BxID = 0;
      const CFuint ByID = 1;
      const CFuint BzID = 2;
      const CFuint gradBxID = elemID*totalNbEqs + BxID;
      const CFuint gradByID = elemID*totalNbEqs + ByID;
      const CFuint gradBzID = elemID*totalNbEqs + BzID;
      _gradBx[XX] = this->m_ux[gradBxID];
      _gradBx[YY] = this->m_uy[gradBxID];

      _gradBy[XX] = this->m_ux[gradByID];
      _gradBy[YY] = this->m_uy[gradByID];

      if(dim == 3)
      {
        _gradBx[ZZ] = this->m_uz[gradBxID];
        _gradBy[ZZ] = this->m_uz[gradByID];

        _gradBz[XX] = this->m_ux[gradBzID];
        _gradBz[YY] = this->m_uy[gradBzID];
        _gradBz[ZZ] = this->m_uz[gradBzID];
      }
   
  if (nbEqs == totalNbEqs || iEqSS == 0) {
    source[0] = 0.;			//x-Faraday's Law
    source[1] = 0.;			//y-Faraday's Law
    source[2] = 0.;			//z-Faraday's Law
    source[3] = - ovEpsilon*Jx;			//x-Ampere's Law
    source[4] = - ovEpsilon*Jy;			//y-Ampere's Law
    source[5] = - ovEpsilon*Jz;  		//z-Ampere's Law
    source[6] = 0.;			//y-Ampere's Law
    source[7] = 0.;  		//z-Ampere's Law
  }
  
  if (nbEqs == totalNbEqs || iEqSS == 1) {
    curlB = _gradBy[XX] - _gradBx[YY];
    JzCurl = curlB/mu0;
    if(is2DHalf) {
      source[8] = 0;                                    //Continuity equation
      source[9] = Jy*BzTotal -JzCurl*ByTotal;			//x-momentum equation
      source[10] = JzCurl*BxTotal -Jx*BzTotal;          //y-momentum equation
      source[11] = Jx*ByTotal - Jy*BxTotal;          //z-momentum equation        #Correction Here
      source[12] = Jx*ExTotal + Jy*EyTotal + JzCurl*(v*BxTotal - u*ByTotal);	//Total Energy
    }
    if(dim == 3)
    {
      Jx = (_gradBz[YY] - _gradBy[ZZ])/mu0;
      Jy = (_gradBx[ZZ] - _gradBz[XX])/mu0;
      Jz = (_gradBy[XX] - _gradBx[YY])/mu0;

      CFreal Ex = -(v*BzTotal - w*ByTotal);
      CFreal Ey = -(w*BxTotal - u*BzTotal);
      CFreal Ez = -(u*ByTotal - v*BxTotal);


      source[8]  = 0.;                                      //Continuity equation
      source[9]  = Jy*BzTotal - Jz*ByTotal;                //x-momentum equation
      source[10] = Jz*BxTotal - Jx*BzTotal;          	  //y-momentum equation
      source[11] = Jx*ByTotal - Jy*BxTotal;          	  //z-momentum equation
      source[12] = Jx*Ex + Jy*Ey + Jz*Ez;  //Total Energy
    }
    if(dim == 2) {
      source[8] = 0;                                  //Continuity equation
      source[9] = Jy*BzTotal -JzCurl*ByTotal;			//x-momentum equation
      source[10] = JzCurl*BxTotal -Jx*BzTotal;		//y-momentum equation
      source[11] = Jx*ExTotal + Jy*EyTotal + JzCurl*(v*BxTotal - u*ByTotal);	//Total Energy
    }
  }
  if (_isResistive == true && (nbEqs == totalNbEqs || iEqSS == 1)) {
    if(is2DHalf || dim ==3 ) {
      source[8] = 0;                                      //Continuity equation
      source[9] = Jy*BzTotal -Jz*ByTotal;                 //x-momentum equation
      source[10] = Jz*BxTotal -Jx*BzTotal;                //y-momentum equation
      source[11] = Jx*ByTotal - Jy*BxTotal;               //z-momentum equation
      source[12] = Jx*ExTotal + Jy*EyTotal + Jz*EzTotal;  //Total Energy
    }
    else {
      source[8] = 0;                                      //Continuity equation
      source[9] = Jy*BzTotal -Jz*ByTotal;                 //x-momentum equation
      source[10] = Jz*BxTotal -Jx*BzTotal;                //y-momentum equation
      source[11] = Jx*ExTotal + Jy*EyTotal + Jz*EzTotal;  //Total Energy
    }
  }
  source *= volumes[elemID];
  divB[elemID] = _gradBx[XX] + _gradBy[YY];
  Current[elemID] = curlB/mu0;
  BxPotential[elemID] = _NonInducedEMField[0];
  ByPotential[elemID] = _NonInducedEMField[1];
  BzPotential[elemID] = _NonInducedEMField[2];

  //cout << "source = "<< source << endl;
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
