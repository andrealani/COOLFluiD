#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/PhysicalConsts.hh"
#include "Framework/NamespaceSwitcher.hh"
#include "Framework/SubSystemStatus.hh"

#include "Common/CFLog.hh"
#include "Common/NoSuchValueException.hh"

#include "FluxReconstructionMethod/StdSourceTerm.hh"
#include "FluxReconstructionMethod/DiffBndCorrectionsRHSFluxReconstruction.hh"
#include "FluxReconstructionMethod/DiffRHSFluxReconstruction.hh"
#include "FluxReconstructionMultiFluidMHD/FluxReconstructionMultiFluidMHD.hh"

#include "MultiFluidMHD/DiffMFMHD2DVarSet.hh"
#include "MultiFluidMHD/MultiFluidMHDVarSet.hh"
#include "MultiFluidMHD/EulerMFMHDTerm.hh"
#include "Maxwell/Maxwell2DProjectionVarSet.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace FluxReconstructionMethod {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
HartmannSourceTerm<UPDATEVAR>::HartmannSourceTerm(const std::string& name) :
  StdSourceTerm(name),
  m_varSet(CFNULL),
  _nstates(CFNULL),
  _isOutward(CFNULL),
  socket_gradients("gradients"),
  socket_divB("divB"),
  socket_Current("Current"),
  socket_BxPotential("BxPotential"),
  socket_ByPotential("ByPotential"),
  socket_BzPotential("BzPotential"),
  _ys(),
  m_solPhysData(),
  _temp(),
  _states(),
  _values(),
  _NonInducedEMField(),
  _J(),
  _dummyGradients(),
  _dataLeftState(),
  _dataRightState(),
  _gradBx(),
  _gradBy(),
  _gradBz(),
  m_source()
{
  addConfigOptionsTo(this);
  
  _electricalConductivity = 1.;
  setParameter("electricalConductivity",&_electricalConductivity);

  _isResistive = false;
  setParameter("IsResistive",&_isResistive);
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::configure ( Config::ConfigArgs& args )
{
  CFAUTOTRACE;

  // configure this object by calling the parent class configure()
  StdSourceTerm::configure(args);
}

//////////////////////////////////////////////////////////////////////////////


template <class UPDATEVAR>
HartmannSourceTerm<UPDATEVAR>::~HartmannSourceTerm()     
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> >                          //Framework::BaseDataSocketSource> >
HartmannSourceTerm<UPDATEVAR>::providesSockets()
{
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result =               //<Framework::BaseDataSocketSource> >   
    StdSourceTerm::providesSockets();
  result.push_back(&socket_divB);
  result.push_back(&socket_Current);
  result.push_back(&socket_BxPotential);
  result.push_back(&socket_ByPotential);
  result.push_back(&socket_BzPotential);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >
     ("electricalConductivity", "electrical Conductivity used in Ohm's law");
  options.template addConfigOption< bool >
     ("IsResistive", "Test for electrical resistivity");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::getSourceTermData()
{
  StdSourceTerm::getSourceTermData();
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::addSourceTerm(RealVector& resUpdates)
{
 
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

//   SafePtr< MultiFluidMHDVarSet > multiFluidMHDVarSet = m_diffVarSet.d_castTo< MultiFluidMHDVarSet <Maxwell2DProjectionVarSet> >();

  DataHandle<CFreal> divB = socket_divB.getDataHandle();
  DataHandle<CFreal> Current = socket_Current.getDataHandle();
  DataHandle<CFreal> BxPotential = socket_BxPotential.getDataHandle();
  DataHandle<CFreal> ByPotential = socket_ByPotential.getDataHandle();
  DataHandle<CFreal> BzPotential = socket_BzPotential.getDataHandle();

  const bool is2DHalf = PhysicalModelStack::getActive()->getImplementor()->is2DHalf();
  
  //const vector<State*>* const states = element->getStates();
  SafePtr<typename UPDATEVAR::PTERM> term = m_varSet->getModel();

  //cf_assert(states->size() == 1);
  
  //SafePtr<typename UPDATEVAR::PTERM> term = m_varSet->getModel();
  const CFuint firstVelocity = term->getFirstScalarVar(1); 
 
  //cout <<"NonInduced EM Field = "<< _NonInducedEMField << endl;
  //DataHandle<CFint> isOutward =  this->socket_isOutward.getDataHandle();
  

  // get the gradients datahandle
  DataHandle< vector< RealVector > > gradients = socket_gradients.getDataHandle();

  // set gradients
  
  const CFuint nbrSol = m_cellStates->size();
  m_cellGrads.resize(nbrSol);

  for (CFuint iSol = 0; iSol < nbrSol; ++iSol)
  { 
    m_varSet->computePhysicalData(*((*m_cellStates)[iSol]), m_solPhysData);

    const CFuint stateID = (*m_cellStates)[iSol]->getLocalID();
    m_cellGrads[iSol] = &gradients[stateID];
   
    if(is2DHalf || PhysicalModelStack::getActive()->getDim() == 2)
    {
      _NonInducedEMField = m_varSet->getModel()->getNonInducedEMField
        (((*m_cellStates)[iSol])->getCoordinates()[XX], ((*m_cellStates)[iSol])->getCoordinates()[YY],0.); //The third component is null
    }
    else
    {
      _NonInducedEMField = m_varSet->getModel()->getNonInducedEMField
        (((*m_cellStates)[iSol])->getCoordinates()[XX], ((*m_cellStates)[iSol])->getCoordinates()[YY], ((*m_cellStates)[iSol])->getCoordinates()[ZZ]); 
    }

    const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
    const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
    const CFuint nbEqs = eqSS.getNbEqsSS();  				
    const CFuint iEqSS = eqSS.getEqSS();

  //Set the velocities
  const CFreal u = m_solPhysData[firstVelocity];
  const CFreal v = m_solPhysData[firstVelocity + 1];
  CFreal w = 0.;


  if(m_dim == 3 || is2DHalf == true){ w = m_solPhysData[firstVelocity + 2];}
  const CFreal omega = _electricalConductivity;
  const CFreal c_e = term->getLightSpeed();
  const CFreal mu0 = term->getPermeability();
  const CFreal ovEpsilon = c_e*c_e*mu0;
  CFreal Jx = 0., Jy = 0., Jz = 0.;
  CFreal curlB = 0.0;

    const CFreal BxTotal = m_solPhysData[UPDATEVAR::PTERM::BX] + _NonInducedEMField[0];
    const CFreal ByTotal = m_solPhysData[UPDATEVAR::PTERM::BY] + _NonInducedEMField[1];
    const CFreal BzTotal = m_solPhysData[UPDATEVAR::PTERM::BZ] + _NonInducedEMField[2];
    const CFreal ExTotal = m_solPhysData[UPDATEVAR::PTERM::EX] + _NonInducedEMField[3];
    const CFreal EyTotal = m_solPhysData[UPDATEVAR::PTERM::EY] + _NonInducedEMField[4];
    const CFreal EzTotal = m_solPhysData[UPDATEVAR::PTERM::EZ] + _NonInducedEMField[5];  


  if(m_dim == 2) 
  {
    Jx = omega*(ExTotal + v*BzTotal);
    Jy = omega*(EyTotal - u*BzTotal);
    Jz = omega*(EzTotal + u*ByTotal - v*BxTotal);

  }
  if(m_dim == 3 || is2DHalf == true)
  {
    Jx = omega*(ExTotal + v*BzTotal - w*ByTotal);
    Jy = omega*(EyTotal + w*BxTotal - u*BzTotal);
    Jz = omega*(EzTotal + u*ByTotal - v*BxTotal);  
  }
  CFreal JzCurl = 0.;

//      cf_assert(_states->size() == 1);

// computing gradients for divB
      const CFuint BxID = 0;
      const CFuint ByID = 1;
      const CFuint BzID = 2;
/*
      const CFuint gradBxID = elemID*totalNbEqs + BxID;
      const CFuint gradByID = elemID*totalNbEqs + ByID;
      const CFuint gradBzID = elemID*totalNbEqs + BzID;
*/

      _gradBx[XX] = (*(m_cellGrads[iSol]))[BxID][XX]; 
      _gradBx[YY] = (*(m_cellGrads[iSol]))[BxID][YY];
      _gradBy[XX] = (*(m_cellGrads[iSol]))[ByID][XX];
      _gradBy[YY] = (*(m_cellGrads[iSol]))[ByID][YY];

      if(m_dim == 3)
      {
        _gradBx[ZZ] = (*(m_cellGrads[iSol]))[BxID][ZZ];
        _gradBy[ZZ] = (*(m_cellGrads[iSol]))[ByID][ZZ];

        _gradBz[XX] = (*(m_cellGrads[iSol]))[BzID][XX];
        _gradBz[YY] = (*(m_cellGrads[iSol]))[BzID][YY];
        _gradBz[ZZ] = (*(m_cellGrads[iSol]))[BzID][ZZ];
      }


  if (nbEqs == totalNbEqs || iEqSS == 0) {
    m_source[0] = 0.;			//x-Faraday's Law
    m_source[1] = 0.;			//y-Faraday's Law
    m_source[2] = 0.;			//z-Faraday's Law
    m_source[3] = - ovEpsilon*Jx;			//x-Ampere's Law
    m_source[4] = - ovEpsilon*Jy;			//y-Ampere's Law
    m_source[5] = - ovEpsilon*Jz;  		//z-Ampere's Law
    m_source[6] = 0.;			//y-Ampere's Law
    m_source[7] = 0.;  		//z-Ampere's Law
  }

  if (nbEqs == totalNbEqs || iEqSS == 1) {
    curlB = _gradBy[XX] - _gradBx[YY];
    JzCurl = curlB/mu0;
    if(is2DHalf) {
      m_source[8] = 0;                                    //Continuity equation
      m_source[9] = Jy*BzTotal -JzCurl*ByTotal;			//x-momentum equation
      m_source[10] = JzCurl*BxTotal -Jx*BzTotal;          //y-momentum equation
      m_source[11] = Jx*ByTotal - Jy*BxTotal;          //z-momentum equation
      m_source[12] = Jx*ExTotal + Jy*EyTotal + JzCurl*(v*BxTotal - u*ByTotal);	//Total Energy
    }
    if(m_dim == 3)
    {
      Jx = (_gradBz[YY] - _gradBy[ZZ])/mu0;
      Jy = (_gradBx[ZZ] - _gradBz[XX])/mu0;
      Jz = (_gradBy[XX] - _gradBx[YY])/mu0;

      CFreal Ex = -(v*BzTotal - w*ByTotal);
      CFreal Ey = -(w*BxTotal - u*BzTotal);
      CFreal Ez = -(u*ByTotal - v*BxTotal);


      m_source[8]  = 0.;                                      //Continuity equation
      m_source[9]  = Jy*BzTotal - Jz*ByTotal;                //x-momentum equation
      m_source[10] = Jz*BxTotal - Jx*BzTotal;          	  //y-momentum equation
      m_source[11] = Jx*ByTotal - Jy*BxTotal;          	  //z-momentum equation
      m_source[12] = Jx*Ex + Jy*Ey + Jz*Ez;  //Total Energy
    }
    if(m_dim == 2) {
      m_source[8] = 0;                                  //Continuity equation
      m_source[9] = Jy*BzTotal -JzCurl*ByTotal;			//x-momentum equation
      m_source[10] = JzCurl*BxTotal -Jx*BzTotal;		//y-momentum equation
      m_source[11] = Jx*ExTotal + Jy*EyTotal + JzCurl*(v*BxTotal - u*ByTotal);	//Total Energy
    }
  }
  if (_isResistive == true && (nbEqs == totalNbEqs || iEqSS == 1)) {
    if(is2DHalf || m_dim ==3 ) {
      m_source[8] = 0;                                      //Continuity equation
      m_source[9] = Jy*BzTotal -Jz*ByTotal;                 //x-momentum equation
      m_source[10] = Jz*BxTotal -Jx*BzTotal;                //y-momentum equation
      m_source[11] = Jx*ByTotal - Jy*BxTotal;               //z-momentum equation
      m_source[12] = Jx*ExTotal + Jy*EyTotal + Jz*EzTotal;  //Total Energy
    }
    else {
      m_source[8] = 0;                                      //Continuity equation
      m_source[9] = Jy*BzTotal -Jz*ByTotal;                 //x-momentum equation
      m_source[10] = Jz*BxTotal -Jx*BzTotal;                //y-momentum equation
      m_source[11] = Jx*ExTotal + Jy*EyTotal + Jz*EzTotal;  //Total Energy
    }
  }


  divB[stateID] = _gradBx[XX] + _gradBy[YY];
  Current[stateID] = curlB/mu0;
  BxPotential[stateID] = _NonInducedEMField[0];
  ByPotential[stateID] = _NonInducedEMField[1];
  BzPotential[stateID] = _NonInducedEMField[2];

  const bool Puvt = getMethodData().getUpdateVarStr() == "Puvt";


  for (CFuint iEq = 0; iEq < totalNbEqs; ++iEq){

       resUpdates[m_nbrEqs*iSol + iEq] = m_source[iEq];
     }
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;

  CFAUTOTRACE;
  StdSourceTerm::setup();

  // get dimensionality
  m_dim = PhysicalModelStack::getActive()->getDim ();

  m_varSet = getMethodData().getUpdateVar(). template d_castTo<UPDATEVAR>();
  m_varSet->getModel()->resizePhysicalData(m_solPhysData);
  m_varSet->getModel()->resizePhysicalData(_dataLeftState);
  m_varSet->getModel()->resizePhysicalData(_dataRightState);
  cf_assert(m_varSet.isNotNull());

  // get the elementTypeData
  SafePtr< vector<ElementTypeData> > elemType = MeshDataStack::getActive()->getElementTypeData();

  // get the number of cells in the mesh
  const CFuint nbrCells = (*elemType)[0].getEndIdx();

  // get the local FR data
  vector< FluxReconstructionElementData* >& frLocalData = getMethodData().getFRLocalData();

  // get nbr of sol pnts
  CFuint nbrSolPnts = frLocalData[0]->getNbrOfSolPnts();

  const CFuint nbrStates = nbrCells*nbrSolPnts;

  DataHandle<CFreal> divB        = socket_divB.getDataHandle();
  DataHandle<CFreal> Current     = socket_Current.getDataHandle();
  DataHandle<CFreal> BxPotential = socket_BxPotential.getDataHandle();  
  DataHandle<CFreal> ByPotential = socket_ByPotential.getDataHandle();
  DataHandle<CFreal> BzPotential = socket_BzPotential.getDataHandle();
  divB.resize(nbrStates);
  divB = 0;
  Current.resize(nbrStates);
  Current = 0;
  BxPotential.resize(nbrStates);
  BxPotential = 0.;
  ByPotential.resize(nbrStates);
  ByPotential = 0.;
  BzPotential.resize(nbrStates);
  BzPotential = 0.;

  m_source.resize(13);
  
  // get MF MHD varset
  m_varSet = getMethodData().getUpdateVar(). template d_castTo<UPDATEVAR>();  
  if (m_varSet.isNull())
  {
    throw Common::ShouldNotBeHereException (FromHere(),"Update variable set is not Hartmann in HartmannSourceTerm!");
  }

  _NonInducedEMField.resize(6);
  _J.resize(3);
  _gradBx.resize(m_dim,0.);
  _gradBy.resize(m_dim,0.);
  if(m_dim == 3)
  {
    _gradBz.resize(m_dim,0.);
  }

  m_varSet->getModel()->resizePhysicalData(m_solPhysData);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void HartmannSourceTerm<UPDATEVAR>::unsetup()
{
  CFAUTOTRACE;
  StdSourceTerm::unsetup();
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector< Common::SafePtr< BaseDataSocketSink > > 
    HartmannSourceTerm<UPDATEVAR>::needsSockets()
{
  std::vector< Common::SafePtr< BaseDataSocketSink > > result = StdSourceTerm::needsSockets();  

  result.push_back(&socket_gradients);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

  } // namespace FluxReconstructionMethod

} // namespace COOLFluiD
