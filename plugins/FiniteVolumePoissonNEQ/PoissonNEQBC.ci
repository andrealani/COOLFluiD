#include "Framework/MeshData.hh"
#include "Framework/NamespaceSwitcher.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolumePoissonNEQ {

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void PoissonNEQBC<BASE>::defineConfigOptions(Config::OptionList& options)
{
  options.addConfigOption< std::vector<std::string> >("PhiVars","Definition of the Variables.");
  options.addConfigOption< std::vector<std::string> >("PhiDef","Definition of the Functions.");
  options.addConfigOption< bool >("useDirichlet","Apply the Dirichlet condition on phi.");
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
PoissonNEQBC<BASE>::
PoissonNEQBC(const std::string& name) :
  BASE(name),
  m_bCoord(),
  m_xyzIter(),
  m_input(),
  _eRL()
{
  this->addConfigOptionsTo(this);
  
  m_functions = std::vector<std::string>();
  this->setParameter("PhiDef",&m_functions);
  
  m_vars = std::vector<std::string>();
  this->setParameter("PhiVars",&m_vars);
  
  m_useDirichlet = true;
  this->setParameter("useDirichlet",&m_useDirichlet);
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
PoissonNEQBC<BASE>::~PoissonNEQBC()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void PoissonNEQBC<BASE>::setup()
{
  using namespace Framework;

  BASE::setup();
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  m_bCoord.resize(dim);
  m_xyzIter.resize(dim + 1);
  m_input.resize(1); // phi component
  _eRL.resize(dim);
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void PoissonNEQBC<BASE>::unsetup()
{
  BASE::unsetup();
}

      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void PoissonNEQBC<BASE>::configure ( Config::ConfigArgs& args )
{  
  using namespace Framework;
  
  BASE::configure(args);

  const std::string name = this->getMethodData().getNamespace();
  
  Common::SafePtr<Namespace> nsp =
    NamespaceSwitcher::getInstance(SubSystemStatusStack::getCurrentName()).getNamespace(name);
  
  // WATCH OUT: both m_functions and m_vars must have sizes > 0 to be usable! 
  cf_assert(m_functions.size() == 1 && m_vars.size() >1);
  
  m_vFunction.setFunctions(m_functions);
  m_vFunction.setVariables(m_vars);
  try {
    m_vFunction.parse();
  }
  catch (Common::ParserException& e) {
    CFout << e.what() << "\n";
    throw; // retrow the exception to signal the error to the user
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void PoissonNEQBC<BASE>::setGhostState(Framework::GeometricEntity *const face)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
 
  CFLog(DEBUG_MAX, "PoissonNEQBC<BASE>::setGhostState() => start\n");
  
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();
  const CFuint lastEq = totalNbEqs - 1;
  const CFuint nbEqs = PhysicalModelStack::getActive()->getEquationSubSysDescriptor().getNbEqsSS();

  // A) In weakly coupled setup:
  // there are two subsystems: (0) plasma equations (nbEqs=nbEq0), (1) Poisson equation (nbEqs=1)
  // nbEqs = nbEqs0+1  (=totalNbEqs)  when computing the RHS or initialization
  // nbEqs = nbEqs0    when computing the jacobian for (0)
  // nbEqs = 1         when computing the jacobian for (1)
  // B) In fully coupled setup: it is ALWAYS nbEqs=totalNbEqs
  
  const CFuint eqSSID = PhysicalModelStack::getActive()->getEquationSubSysDescriptor().getEqSS();
  if (nbEqs != 1 || (nbEqs == 1 && eqSSID == 0) || nbEqs == totalNbEqs) {
    // CFLog(INFO, "BASE::setGhostState(face) "  << "\n");
    BASE::setGhostState(face);
  }
  // CFLog(INFO "PoissonNEQBC<BASE>::setGhostState() with nbEqs = " << nbEqs << "\n");
  // here it is assumed that the Poisson equation is the last one
  if ((nbEqs == 1 && eqSSID == 1) || nbEqs == totalNbEqs) {
    CFLog(DEBUG_MIN, "PoissonNEQBC<BASE>::setGhostState() with nbEqs = " << nbEqs << "\n");
    // CFLog(INFO "inside loop"<<"\n");
    State *const innerState = face->getState(0);
    State *const ghostState = face->getState(1);
    const Node& nodeI = innerState->getCoordinates();
    const Node& nodeG = ghostState->getCoordinates();
    
    // compute the boundary value: Phi (Dirichlet) or dPhi/dr (Neumann)
    computeBoundaryValue(nodeI, nodeG, m_input);
    
    if (m_useDirichlet) { 
      // Dirichlet condition with m_input[0] storing the imposed function for phi defined by PhiDef(PhiVars)
      (*ghostState)[lastEq] = 2.0*(m_input[0]) - (*innerState)[lastEq];
       //CFLog(INFO "inside Dirichlet"<<"\n");
      // CFLog(INFO "2.0*(m_input[0])  = "<< 2.0*(m_input[0])  << "\n");
      // CFLog(INFO "(*innerState)[lastEq] = "<< (*innerState)[lastEq] << "\n");
      // CFLog(INFO "2.0*(m_input[0]) - (*innerState)[lastEq] = "<< 2.0*(m_input[0]) - (*innerState)[lastEq] << "\n");
    }
    else {
      // Neumann condition
      // CFLog(INFO "inside Neumann"<<"\n");
      // distance for the computation of the gradient
      const CFreal dr = MathFunctions::getDistance(nodeI, nodeG);
      cf_assert(dr > 0.);
      _eRL = (nodeG - nodeI)/dr;
      
      const CFuint dim = PhysicalModelStack::getActive()->getDim();
      const CFuint faceID = face->getID();
      const CFuint startID = faceID*dim;
      DataHandle< CFreal> normals   = this->socket_normals.getDataHandle();
      DataHandle< CFreal> faceAreas = this->socket_faceAreas.getDataHandle();
      RealVector normalPtr(dim, &normals[startID]);
      CFreal eDotN = MathFunctions::innerProd(_eRL, normalPtr);
      cf_assert(faceAreas[faceID] > 0.);
      eDotN /= faceAreas[faceID];
      (*ghostState)[lastEq] = (*innerState)[lastEq] + dr*m_input[0]/eDotN;
    }
  }
  
  CFLog(DEBUG_MAX, "PoissonNEQBC<BASE>::setGhostState() => end\n");
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void PoissonNEQBC<BASE>::computeBoundaryValue
(const RealVector& innerCoord, const RealVector& ghostCoord, RealVector& input)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
 
  // coordinate of the boundary point
  m_bCoord = (innerCoord + ghostCoord);
  m_bCoord *= 0.5;
  
  // [x,y,z] and iteration "i" are fed to the evaluate function
  const CFuint dim = m_bCoord.size();
  for (CFuint i = 0; i < dim; ++i) {
    m_xyzIter[i] = m_bCoord[i]; 
  }
  m_xyzIter[dim] = SubSystemStatusStack::getActive()->getNbIter();
  
  //Evaluate the function
  m_vFunction.evaluate(m_xyzIter, input);
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolumePoissonNEQ

  } // namespace Numerics

} // namespace COOLFluiD
